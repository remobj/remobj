name: Code Coverage

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

permissions:
  contents: read
  pull-requests: write
  checks: write
  statuses: write

jobs:
  coverage:
    name: Coverage Analysis
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - uses: pnpm/action-setup@v4
        with:
          version: 8
    
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'pnpm'
          
      - name: Install dependencies  
        run: pnpm install --no-frozen-lockfile
        
      - name: Run tests with coverage
        run: pnpm run test:coverage
        
      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./coverage/coverage-final.json
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false
        
      - name: Generate Coverage Summary
        id: coverage-summary
        run: |
          # Extract coverage data
          COVERAGE_JSON=$(cat coverage/coverage-final.json)
          
          # Calculate coverage percentages using Node.js
          node -e "
          const fs = require('fs');
          const coverage = JSON.parse(fs.readFileSync('./coverage/coverage-final.json', 'utf8'));
          
          let totalStatements = 0;
          let coveredStatements = 0;
          let totalBranches = 0;
          let coveredBranches = 0;
          let totalFunctions = 0;
          let coveredFunctions = 0;
          let totalLines = 0;
          let coveredLines = 0;
          
          for (const file in coverage) {
            const fileCov = coverage[file];
            
            // Statements
            const stmts = Object.keys(fileCov.statementMap || {}).length;
            const stmtsCovered = Object.values(fileCov.s || {}).filter(v => v > 0).length;
            totalStatements += stmts;
            coveredStatements += stmtsCovered;
            
            // Branches
            const branches = Object.values(fileCov.branchMap || {}).reduce((acc, b) => acc + b.locations.length, 0);
            const branchesCovered = Object.values(fileCov.b || {}).flat().filter(v => v > 0).length;
            totalBranches += branches;
            coveredBranches += branchesCovered;
            
            // Functions
            const funcs = Object.keys(fileCov.fnMap || {}).length;
            const funcsCovered = Object.values(fileCov.f || {}).filter(v => v > 0).length;
            totalFunctions += funcs;
            coveredFunctions += funcsCovered;
            
            // Lines (using statement map as proxy for lines)
            totalLines += stmts;
            coveredLines += stmtsCovered;
          }
          
          const stmtPct = totalStatements ? ((coveredStatements / totalStatements) * 100).toFixed(2) : '0';
          const branchPct = totalBranches ? ((coveredBranches / totalBranches) * 100).toFixed(2) : '0';
          const funcPct = totalFunctions ? ((coveredFunctions / totalFunctions) * 100).toFixed(2) : '0';
          const linePct = totalLines ? ((coveredLines / totalLines) * 100).toFixed(2) : '0';
          
          console.log('STMT_PCT=' + stmtPct);
          console.log('BRANCH_PCT=' + branchPct);
          console.log('FUNC_PCT=' + funcPct);
          console.log('LINE_PCT=' + linePct);
          
          // Write to GitHub output
          fs.appendFileSync(process.env.GITHUB_OUTPUT, 'stmt_pct=' + stmtPct + '\n');
          fs.appendFileSync(process.env.GITHUB_OUTPUT, 'branch_pct=' + branchPct + '\n');
          fs.appendFileSync(process.env.GITHUB_OUTPUT, 'func_pct=' + funcPct + '\n');
          fs.appendFileSync(process.env.GITHUB_OUTPUT, 'line_pct=' + linePct + '\n');
          
          // Check thresholds (80%)
          const threshold = 80;
          const allPass = parseFloat(stmtPct) >= threshold && 
                          parseFloat(branchPct) >= threshold && 
                          parseFloat(funcPct) >= threshold && 
                          parseFloat(linePct) >= threshold;
          
          if (!allPass) {
            console.error('‚ùå Coverage below threshold of ' + threshold + '%');
            process.exit(1);
          } else {
            console.log('‚úÖ Coverage meets threshold of ' + threshold + '%');
          }
          "
          
      - name: Create Coverage Comment
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const stmtPct = '${{ steps.coverage-summary.outputs.stmt_pct }}';
            const branchPct = '${{ steps.coverage-summary.outputs.branch_pct }}';
            const funcPct = '${{ steps.coverage-summary.outputs.func_pct }}';
            const linePct = '${{ steps.coverage-summary.outputs.line_pct }}';
            
            const threshold = 80;
            const getEmoji = (pct) => parseFloat(pct) >= threshold ? '‚úÖ' : '‚ùå';
            const getColor = (pct) => {
              const val = parseFloat(pct);
              if (val >= 90) return 'üü¢';
              if (val >= 80) return 'üü°';
              if (val >= 60) return 'üü†';
              return 'üî¥';
            };
            
            const body = `## üìä Coverage Report
            
            | Type | Coverage | Status | Threshold |
            |------|----------|--------|-----------|
            | **Statements** | ${getColor(stmtPct)} ${stmtPct}% | ${getEmoji(stmtPct)} | 80% |
            | **Branches** | ${getColor(branchPct)} ${branchPct}% | ${getEmoji(branchPct)} | 80% |
            | **Functions** | ${getColor(funcPct)} ${funcPct}% | ${getEmoji(funcPct)} | 80% |
            | **Lines** | ${getColor(linePct)} ${linePct}% | ${getEmoji(linePct)} | 80% |
            
            ${parseFloat(stmtPct) >= threshold && parseFloat(branchPct) >= threshold && parseFloat(funcPct) >= threshold && parseFloat(linePct) >= threshold 
              ? '### ‚úÖ All coverage thresholds met!' 
              : '### ‚ùå Coverage is below the required threshold of 80%'}
            
            <details>
            <summary>Coverage Details</summary>
            
            - Run \`npm run test:coverage\` locally to see detailed coverage report
            - Coverage report artifacts are available in the workflow run
            - Thresholds are configured in \`vitest.config.ts\`
            
            </details>`;
            
            // Find existing comment
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number
            });
            
            const botComment = comments.find(comment => 
              comment.user.type === 'Bot' && 
              comment.body.includes('Coverage Report')
            );
            
            if (botComment) {
              // Update existing comment
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body
              });
            } else {
              // Create new comment
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body
              });
            }
        
      - name: Set Coverage Status
        if: always()
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const stmtPct = '${{ steps.coverage-summary.outputs.stmt_pct }}' || '0';
            const success = ${{ job.status == 'success' }};
            
            await github.rest.repos.createCommitStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              sha: context.sha,
              state: success ? 'success' : 'failure',
              target_url: `${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}`,
              description: `Coverage: ${stmtPct}% (threshold: 80%)`,
              context: 'coverage/vitest'
            });
        
      - name: Upload coverage artifacts
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: |
            coverage/
            !coverage/tmp/
          retention-days: 30