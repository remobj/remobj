name: Performance Benchmarks

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:

jobs:
  benchmark:
    name: Run Benchmarks
    runs-on: ${{ matrix.os }}
    
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        node-version: [20.x]
      fail-fast: false
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Setup pnpm
      uses: pnpm/action-setup@v4
      with:
        version: 9
    
    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'pnpm'
    
    - name: Install dependencies
      run: pnpm install --frozen-lockfile
    
    - name: Build packages
      run: npm run build
    
    - name: Install benchmark dependencies
      run: |
        cd benchmark
        npm install
    
    - name: Run benchmarks
      id: bench
      run: |
        cd benchmark
        node index.js > results.txt 2>&1
        echo "results<<EOF" >> $GITHUB_OUTPUT
        cat results.txt >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT
    
    - name: Upload benchmark results
      uses: actions/upload-artifact@v4
      with:
        name: benchmark-${{ matrix.os }}-node${{ matrix.node-version }}
        path: benchmark/results.txt
    
    # For PRs, compare with main branch
    - name: Checkout main for comparison
      if: github.event_name == 'pull_request'
      run: |
        git fetch origin main
        git checkout origin/main -- .
    
    - name: Build main branch
      if: github.event_name == 'pull_request'
      run: |
        pnpm install --frozen-lockfile
        npm run build
    
    - name: Run main branch benchmarks
      if: github.event_name == 'pull_request'
      run: |
        cd benchmark
        npm install
        node index.js > main-results.txt 2>&1
    
    - name: Generate comparison
      if: github.event_name == 'pull_request'
      id: compare
      run: |
        cd benchmark
        node -e "
        const fs = require('fs');
        
        function parseResults(text) {
          const lines = text.split('\\n');
          const results = {};
          let currentTest = null;
          
          for (const line of lines) {
            if (line.includes('âœ“')) {
              currentTest = line.split('âœ“')[1].trim();
              results[currentTest] = {};
            } else if (currentTest && line.includes('Ops/sec:')) {
              const match = line.match(/([\\d.]+[KM]?)\\s+ops/);
              if (match) results[currentTest].ops = match[1];
            } else if (currentTest && line.includes('Average:')) {
              const match = line.match(/([\\d.]+)\\s+Î¼s/);
              if (match) results[currentTest].avg = parseFloat(match[1]);
            }
          }
          return results;
        }
        
        function parseOps(ops) {
          if (ops.endsWith('M')) return parseFloat(ops) * 1000000;
          if (ops.endsWith('K')) return parseFloat(ops) * 1000;
          return parseFloat(ops);
        }
        
        const current = fs.readFileSync('results.txt', 'utf8');
        const main = fs.readFileSync('main-results.txt', 'utf8');
        
        const currentResults = parseResults(current);
        const mainResults = parseResults(main);
        
        let output = '## ðŸ“Š Benchmark Comparison\\n\\n';
        output += '| Test | Main | PR | Change |\\n';
        output += '|------|------|----|---------:|\\n';
        
        let improved = 0, regressed = 0, unchanged = 0;
        
        for (const test in currentResults) {
          if (mainResults[test]) {
            const mainOps = parseOps(mainResults[test].ops || '0');
            const currentOps = parseOps(currentResults[test].ops || '0');
            const change = mainOps ? ((currentOps - mainOps) / mainOps * 100) : 0;
            
            let emoji = 'âšª';
            if (change > 5) { emoji = 'ðŸŸ¢'; improved++; }
            else if (change < -5) { emoji = 'ðŸ”´'; regressed++; }
            else unchanged++;
            
            const changeStr = change > 0 ? '+' + change.toFixed(1) : change.toFixed(1);
            output += \`| \${test} | \${mainResults[test].ops || 'N/A'} | \${currentResults[test].ops || 'N/A'} | \${emoji} \${changeStr}% |\\n\`;
          }
        }
        
        output += '\\n### Summary\\n';
        output += \`- ðŸŸ¢ Improved: \${improved}\\n\`;
        output += \`- ðŸ”´ Regressed: \${regressed}\\n\`;
        output += \`- âšª Unchanged: \${unchanged}\\n\`;
        
        fs.writeFileSync('comparison.md', output);
        console.log(output);
        " > /dev/null
        
        echo "comparison<<EOF" >> $GITHUB_OUTPUT
        cat comparison.md >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT
    
    - name: Comment PR with results
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const comparison = `${{ steps.compare.outputs.comparison }}`;
          
          const body = `## Benchmark Results (${{ matrix.os }} - Node ${{ matrix.node-version }})
          
          ${comparison}
          
          <details>
          <summary>View full benchmark output</summary>
          
          \`\`\`
          ${{ steps.bench.outputs.results }}
          \`\`\`
          </details>`;
          
          // Try to find and update existing comment
          const { data: comments } = await github.rest.issues.listComments({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
          });
          
          const botComment = comments.find(comment => 
            comment.user.type === 'Bot' && 
            comment.body.includes('Benchmark Results') &&
            comment.body.includes('${{ matrix.os }}')
          );
          
          if (botComment) {
            await github.rest.issues.updateComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: botComment.id,
              body: body
            });
          } else {
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: body
            });
          }
  
  benchmark-summary:
    name: Summary
    runs-on: ubuntu-latest
    needs: benchmark
    if: always()
    
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        pattern: benchmark-*
    
    - name: Generate summary
      run: |
        echo "# ðŸ“Š Benchmark Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        for dir in benchmark-*/; do
          if [ -d "$dir" ]; then
            os_node=$(basename "$dir")
            echo "## $os_node" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            
            # Extract key metrics
            echo '```' >> $GITHUB_STEP_SUMMARY
            grep -E "(âœ“|Fastest operations:|Slowest operations:)" "$dir/results.txt" | head -20 >> $GITHUB_STEP_SUMMARY || true
            echo '```' >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
          fi
        done
        
        echo "âœ… All benchmarks completed" >> $GITHUB_STEP_SUMMARY