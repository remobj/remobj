name: Release

on:
  push:
    tags:
      - 'v*.*.*'
      - 'v*.*.*-*'  # Pre-releases (beta, rc, etc.)
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., 0.1.0, 0.1.0-beta.1)'
        required: true
        type: string
      prerelease:
        description: 'Is this a pre-release?'
        required: false
        type: boolean
        default: false

permissions:
  contents: write
  packages: write
  id-token: write  # Required for NPM provenance

jobs:
  validate:
    name: Validate Release
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      prerelease: ${{ steps.version.outputs.prerelease }}
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Determine version
        id: version
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            VERSION="${{ github.event.inputs.version }}"
            PRERELEASE="${{ github.event.inputs.prerelease }}"
          else
            VERSION="${GITHUB_REF#refs/tags/v}"
            if [[ "$VERSION" == *"-"* ]]; then
              PRERELEASE="true"
            else
              PRERELEASE="false"
            fi
          fi
          
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "prerelease=$PRERELEASE" >> $GITHUB_OUTPUT
          echo "📦 Version: $VERSION (prerelease: $PRERELEASE)"

  quality:
    name: Quality Checks
    runs-on: ubuntu-latest
    needs: validate
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - uses: pnpm/action-setup@v2
        with:
          version: 8
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'pnpm'
      
      - name: Install dependencies
        run: pnpm install --no-frozen-lockfile
      
      - name: Type check
        run: pnpm run typecheck
      
      - name: Lint
        run: pnpm run lint
      
      - name: Run tests
        run: pnpm test
      
      - name: Check coverage
        run: |
          pnpm run test:coverage
          
          # Parse coverage and ensure it meets thresholds
          node -e "
          const fs = require('fs');
          const coverage = JSON.parse(fs.readFileSync('./coverage/coverage-final.json', 'utf8'));
          let totalStmts = 0, coveredStmts = 0;
          
          for (const file in coverage) {
            const fileCov = coverage[file];
            const stmts = Object.keys(fileCov.statementMap || {}).length;
            const covered = Object.values(fileCov.s || {}).filter(v => v > 0).length;
            totalStmts += stmts;
            coveredStmts += covered;
          }
          
          const pct = totalStmts ? (coveredStmts / totalStmts * 100) : 0;
          console.log('Coverage: ' + pct.toFixed(2) + '%');
          
          if (pct < 80) {
            console.error('❌ Coverage below 80% threshold');
            process.exit(1);
          }
          console.log('✅ Coverage meets threshold');
          "

  build:
    name: Build & Prepare
    runs-on: ubuntu-latest
    needs: [validate, quality]
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - uses: pnpm/action-setup@v2
        with:
          version: 8
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'pnpm'
      
      - name: Install dependencies
        run: pnpm install --no-frozen-lockfile
      
      - name: Update versions
        run: |
          VERSION="${{ needs.validate.outputs.version }}"
          
          # Update root package.json
          npm version $VERSION --no-git-tag-version --allow-same-version
          
          # Update all workspace packages
          pnpm -r exec npm version $VERSION --no-git-tag-version --allow-same-version
          
          echo "✅ Updated all packages to version $VERSION"
      
      - name: Build all packages
        run: pnpm run build
      
      - name: Generate API documentation
        run: pnpm run docs:generate
      
      - name: Generate changelog
        run: |
          # Install changelog generator
          npm install -g conventional-changelog-cli
          
          VERSION="${{ needs.validate.outputs.version }}"
          
          # Generate changelog for this release
          if [ ! -f CHANGELOG.md ]; then
            echo "# Changelog" > CHANGELOG.md
            echo "" >> CHANGELOG.md
            echo "All notable changes to this project will be documented in this file." >> CHANGELOG.md
            echo "" >> CHANGELOG.md
          fi
          
          # Generate release notes
          conventional-changelog -p angular -i CHANGELOG.md -s --release-count 1
          
          # Also generate release notes for GitHub
          conventional-changelog -p angular -o RELEASE_NOTES.md --release-count 1
          
          echo "✅ Changelog generated for version $VERSION"
      
      - name: Bundle size report
        run: |
          # Generate bundle size report
          node -e "
          const fs = require('fs');
          const path = require('path');
          const zlib = require('zlib');
          
          const packages = ['core', 'shared', 'weakbimap'];
          let report = '## 📦 Bundle Sizes\\n\\n';
          report += '| Package | Format | Size | Gzip | Brotli |\\n';
          report += '|---------|--------|------|------|--------|\\n';
          
          let totalSize = 0, totalGzip = 0, totalBrotli = 0;
          
          for (const pkg of packages) {
            const distDir = path.join('packages', pkg, 'dist');
            if (!fs.existsSync(distDir)) continue;
            
            const files = fs.readdirSync(distDir).filter(f => f.endsWith('.js') && !f.endsWith('.d.ts'));
            
            for (const file of files) {
              const filePath = path.join(distDir, file);
              const content = fs.readFileSync(filePath);
              const gzip = zlib.gzipSync(content);
              const brotli = zlib.brotliCompressSync(content);
              
              const format = file.includes('.esm.') ? 'ESM' : 
                           file.includes('.umd.') ? 'UMD' : 
                           file.includes('.bundler.') ? 'Bundler' : 'Unknown';
              
              report += '| @remobj/' + pkg + ' | ' + format + ' | ';
              report += (content.length / 1024).toFixed(1) + ' KB | ';
              report += (gzip.length / 1024).toFixed(1) + ' KB | ';
              report += (brotli.length / 1024).toFixed(1) + ' KB |\\n';
              
              totalSize += content.length;
              totalGzip += gzip.length;
              totalBrotli += brotli.length;
            }
          }
          
          report += '\\n**Total:** ';
          report += (totalSize / 1024).toFixed(1) + ' KB (';
          report += (totalGzip / 1024).toFixed(1) + ' KB gzipped, ';
          report += (totalBrotli / 1024).toFixed(1) + ' KB brotli)';
          
          fs.writeFileSync('bundle-sizes.md', report);
          console.log(report);
          "
      
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: release-artifacts
          path: |
            packages/*/dist/
            CHANGELOG.md
            RELEASE_NOTES.md
            bundle-sizes.md
          retention-days: 7

  publish:
    name: Publish to NPM
    runs-on: ubuntu-latest
    needs: [validate, build]
    environment: npm
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - uses: pnpm/action-setup@v2
        with:
          version: 8
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          registry-url: 'https://registry.npmjs.org'
      
      - name: Install dependencies
        run: pnpm install --no-frozen-lockfile
      
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: release-artifacts
      
      - name: Update versions before publish
        run: |
          VERSION="${{ needs.validate.outputs.version }}"
          
          # Update all versions
          npm version $VERSION --no-git-tag-version --allow-same-version
          pnpm -r exec npm version $VERSION --no-git-tag-version --allow-same-version
      
      - name: Configure npm
        run: |
          echo "//registry.npmjs.org/:_authToken=${NODE_AUTH_TOKEN}" > ~/.npmrc
          npm whoami
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
      
      - name: Publish packages
        run: |
          VERSION="${{ needs.validate.outputs.version }}"
          PRERELEASE="${{ needs.validate.outputs.prerelease }}"
          
          # Determine npm tag
          if [[ "$PRERELEASE" == "true" ]]; then
            if [[ "$VERSION" == *"beta"* ]]; then
              TAG="beta"
            elif [[ "$VERSION" == *"rc"* ]]; then
              TAG="rc"
            elif [[ "$VERSION" == *"alpha"* ]]; then
              TAG="alpha"
            else
              TAG="next"
            fi
          else
            TAG="latest"
          fi
          
          echo "📦 Publishing version $VERSION with tag: $TAG"
          
          # Publish each package with provenance
          # Note: Using --no-git-checks because we're in CI
          pnpm -r publish --access public --tag $TAG --provenance --no-git-checks
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
      
      - name: Verify publication
        continue-on-error: true
        run: |
          VERSION="${{ needs.validate.outputs.version }}"
          
          # Wait a bit for npm to update
          sleep 15
          
          # Verify each package
          for pkg in core shared devtools weakbimap; do
            if npm view @remobj/$pkg@$VERSION version 2>/dev/null; then
              echo "✅ @remobj/$pkg@$VERSION published successfully"
            else
              echo "⚠️ Could not immediately verify @remobj/$pkg@$VERSION (may take time to propagate)"
            fi
          done

  github-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [validate, build, publish]
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: release-artifacts
      
      - name: Create tarball
        run: |
          VERSION="${{ needs.validate.outputs.version }}"
          tar -czf "remobj-v${VERSION}.tar.gz" packages/*/dist/
      
      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ needs.validate.outputs.version }}
          name: v${{ needs.validate.outputs.version }}
          body_path: RELEASE_NOTES.md
          prerelease: ${{ needs.validate.outputs.prerelease == 'true' }}
          files: |
            remobj-v*.tar.gz
            bundle-sizes.md
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  post-release:
    name: Post-Release
    runs-on: ubuntu-latest
    needs: [validate, github-release]
    if: always()
    
    steps:
      - name: Checkout main
        uses: actions/checkout@v4
        with:
          ref: main
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: release-artifacts
      
      - name: Update changelog in repository
        run: |
          VERSION="${{ needs.validate.outputs.version }}"
          
          # Configure git
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          
          # Update and commit changelog
          if [ -f CHANGELOG.md ]; then
            git add CHANGELOG.md
            git commit -m "docs: update CHANGELOG.md for v$VERSION [skip ci]" || echo "No changes to commit"
            git push origin main || echo "Could not push (may need permissions)"
          fi
      
      - name: Summary
        run: |
          VERSION="${{ needs.validate.outputs.version }}"
          echo "## 🎉 Release v$VERSION Complete!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📦 NPM Packages" >> $GITHUB_STEP_SUMMARY
          echo "- [@remobj/core](https://www.npmjs.com/package/@remobj/core/v/$VERSION)" >> $GITHUB_STEP_SUMMARY
          echo "- [@remobj/shared](https://www.npmjs.com/package/@remobj/shared/v/$VERSION)" >> $GITHUB_STEP_SUMMARY
          echo "- [@remobj/devtools](https://www.npmjs.com/package/@remobj/devtools/v/$VERSION)" >> $GITHUB_STEP_SUMMARY
          echo "- [@remobj/weakbimap](https://www.npmjs.com/package/@remobj/weakbimap/v/$VERSION)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🏷️ GitHub Release" >> $GITHUB_STEP_SUMMARY
          echo "[View Release](https://github.com/remobj/remobj/releases/tag/v$VERSION)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📝 Next Steps" >> $GITHUB_STEP_SUMMARY
          echo "- Monitor npm download stats" >> $GITHUB_STEP_SUMMARY
          echo "- Check for user issues" >> $GITHUB_STEP_SUMMARY
          echo "- Plan next release features" >> $GITHUB_STEP_SUMMARY